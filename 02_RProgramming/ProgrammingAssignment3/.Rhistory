demo()
demo(graphics)
cars
head(cars)
scatter.smooth(x=cars$speed, y=cars$dist, main="Dist - Speed")
demo()
demo(lm.glm)
install.packages("swirl")
x <- 1
print(x)
x <- 4l
x <- 4L
class(x)
x <- c(1,3,5)
y <- c(3,2,10)
rbind(x,y)
x <- list(2,"a","b",TRUE)
x[1]
x[[1]]
class(x[[1]])
x <- 1:4
y <- 2:3
x+y
class(x+y)
x <- c(17,14,4,5,13,12,10)
x
x[x>10] <- 4
x
x <- c(17,14,4,5,13,12,10)
x[x>10] == 4
hw1_data <- read.csv("~/Kevin/Learning/Statistics/DataScience_JohnsHopkins_Coursera/02_RProgramming/hw1_data.csv")
View(hw1_data)
hw1_data[1,]
hw1_data[1:2,]
length(hw1_data[])
length(hw1_data[,1])
hw1_data[end-1:end,]
hw1_data[(end-1):end,]
hw1_data[end,]
help("end")
attributes(hw1_data)
hw1_data.names
is.na(hw1_data["Ozone"])
sum(is.na(hw1_data["Ozone"]))
missingOzone <- is.na(hw1_data["Ozone"])
hw1_data[missingOzone,]
hw1_data[missingOzone][1,]
hw1_data[1,]
hw1_data[missingOzone]
hw1_data[missingOzone][,1]
hw1_data[,missingOzone][,1]
hw1_data[,missingOzone]
hw1_data[missingOzone]
hw1_data[,1]
hw1_data["Ozone"]
hw1_data["Ozone"][missingOzone]
hw1_data["Ozone"][!missingOzone]
hw1_data[!missingOzone]["Ozone"]
hw1_data["Ozone"][!missingOzone]
mean(hw1_data["Ozone"][!missingOzone])
hw1_data["Ozone">31]
hw1_data[["Ozone">31]]
hw1_data["Ozone"]
hw1_data["Ozone">31,]
hw1_data[Month=="6"]
hw1_data["Month"=="6"]
hw1_data["Month"="6"]
hw1_data[["Month"="6"]]
hw1_data[Month == "6"]
hw1_data["Month"]
hw1_data["Month"] > 6
mean(hw1_data["Temp"][hw1_data["Month"]>6])
hw1_data["Temp"][hw1_data["Month"]>6
hw1_data[["Temp"][hw1_data["Month"]>6]
hw1_data["Temp"][[hw1_data["Month"]>6]
hw1_data["Temp"][[hw1_data["Month"]>6]
hw1_data["Temp"][hw1_data["Month"]>6
mean(hw1_data["Temp"][hw1_data["Month"]==6])
max(hw1_data["Ozone"]["Month"]==5)
max(hw1_data["Ozone"][hw1_data"Month"]==5)
max(hw1_data["Ozone"][hw1_data["Month"]==5)
max(hw1_data["Ozone"][hw1_data["Month"]==5])
hw1_data["Ozone"]>21
complete <- complete.cases(hw1_data)
complete
hw1_data[,[hw1_data["Ozone"]>31]
hw1_data[,[hw1_data["Ozone"]>31]
read.csv("C:/Users/Kevin/Documents/Kevin/Learning/Statistics/DataScience_JohnsHopkins_Coursera/02_RProgramming/hw1_data.csv")
hw1_data[$Ozone > 31]
hw1_data[Ozone > 31]
hw1 <- read.csv("C:/Users/Kevin/Documents/Kevin/Learning/Statistics/DataScience_JohnsHopkins_Coursera/02_RProgramming/hw1_data.csv")
hw1[Ozone > 31]
hw1[hw1$Ozone > 31]
hw1[hw1[Ozone] > 31]
hw1["Ozone"] > 31
ozoneFilter <- hw1["Ozone"] > 31
hw1["Ozone"][!ozoneFilter]
hw1[!ozoneFilter]
x = rnorm(100)
y = rnorm(100)
plot(x,y)
plot(x,y,xlab="this is the x-axis",ylab="this is the y axis",
main="Plot of X vs Y")
list.files()
setwd("R")
getwd()
list.files()
setwd("../RScripts/ISLR_Labs/")
getwd()
list.files()
dir.create("Chapter_02")
setwd("Chapter_02/")
pdf("Figure.pdf")
plot(x,y,col="green")
dev.off()
x <- seq(1,10)
print(x)
x <- seq(1,10)
print(x)
x <- 1:10
print(x)
x <- seq(-pi,pi,length=50)
print(x)
y <- x
f <- outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
contour(x,y,f,nlevels=45,add=T)
contour(x,y,fa,nlevels=15)
fa <- (f-t(f))/2
contour(x,y,fa,nlevels=15)
image(x,y,fa)
persp(x,y,fa)
persp(x,y,fa ,theta =30)
persp(x,y,fa ,theta =30, phi =20)
persp(x,y,fa ,theta =30, phi =70)
persp(x,y,fa ,theta =30, phi =40)
A <- matrix(1:16,nrow=4,ncol=4)
print(A)
print(A[2,3])
print(A[c(1,3),c(2,4)])
print(A[1:3,2:4])
print(A[1:2,])
print(A[,1:2])
print(A[-c(1,3),])
print(dim(A))
Auto=read.table("C:/Users/Kevin/Documents/Kevin/Learning/Statistics/ISLRData/Auto.data")
fix(Auto)
fix(Auto)
Auto=read.table("C:/Users/Kevin/Documents/Kevin/Learning/Statistics/ISLRData/Auto.data",
header=TRUE,na.strings="?")
fix(Auto)
Auto=read.csv("C:/Users/Kevin/Documents/Kevin/Learning/Statistics/ISLRData/Auto.csv",
header=TRUE,na.strings="?")
fix(Auto)
print(dim(Auto))
Auto <- na.omit(Auto)
print(dim(Auto))
print(names(Auto))
plot(Auto$cylinders, Auto$mpg)
attach(Auto)
plot(cylinders, mpg)
cylinders <- as.factor(cylinders)
plot(cylinders, mpg)
?plot
plot(cylinders, mpg, col="red")
plot(cylinders, mpg, col="red", varwidth=TRUE)
plot(cylinders, mpg, col="red", varwidth=TRUE, horizontal=TRUE)
plot(cylinders, mpg, col="red", varwidth=TRUE, xlab="cylinders",
ylab="mpg")
hist(mpg)
hist(mpg, col=2)
hist(mpg, col=2, breaks=15)
pairs(Auto)
pairs(~ mpg + displacement + horsepower + weight +
acceleration, Auto)
plot(horsepower,mpg)
identify(horsepower, mpg, name)
summary(Auto)
summary(mpg)
ls(rm("Auto"))
summary(mpg)
ls()
rm(list=ls())
getwd()
setwd("../../..")
getwd()
library("swirl")
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11.5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
telegram("I'm","getting","a","job")
submit()
submit()
mad_libs(place="Peru",adjective="spunky",noun="fox")
submit()
"I" %p% "love" %p% "R!"
x <- 1:10
if(x>5){}
if(x>5){x<-0}
install.packages("tidyverse")
library(tidyverse)
install.packages(c("nycflights13", "gapminder", "Lahman"))
library(tidyverse)
mpg
?mpg
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy))
ggplot(data=mpg)
head(mpg)
nrow(mpg)
ncol(mpg)
?mpg
ggplot(data=mpg) + geom_point(mapping = aes(x=hwy, y= cyl))
ggplot(data=mpg) + geom_point(mapping = aes(x=class, y= drv))
ggplot(data=mpg, aes(x=hwy, y=cyl)) + geom_point()
ggplot(data=mpg, aes(x=hwy, y=cyl))
ggplot(data=mpg, aes(x=hwy, y=cyl)) + geom_count()
library(fredr)
install.packages("fredr")
installed.packages("tidyverse")
install.packages("tidyverse")
install.packages("shinydashboard")
fredr_set_key("a6ecd9c2518159c1fcd6fe9b6ddf7ee5")
library(fredr)
library(tidyverse)
library(shinydashboard)
fredr_set_key("a6ecd9c2518159c1fcd6fe9b6ddf7ee5")
civpart <- fredr(series_id = "CIVPART")
civpart
fredr_series_search_text("employment 25-54")
installed.packages("dygraphs")
install.packages("dygraphs")
install.packages("plotly")
install.packages("quantmod")
?icon()
install.packages("quantmod")
install.packages("dygraphs")
install.packages("dygraphs")
library(dygraphs)
library(datasets)
data(mtcars)
tapply(mtcars$cylinder, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars,tapply(mpg,cyl,mean))
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
lapply(mtcars, mean)
?mtcars
tapply(mtcars$hp, mtcars$cyl, mean)
rm(mtcars)
outcomeData <- read.csv("outcome-of-care-measures.csv",
colClasses="character",
na.strings="Not Available")
## Create list containing the 3 types of outcomes with their associated
## column numbers for the 30-day mortality rate
outcomes <- vector(mode="list", length=3)
names(outcomes) <- c("heart attack", "heart failure", "pneumonia")
outcomes[[1]] <- 11; outcomes[[2]] <- 17; outcomes[[3]] <- 23
## Create character vector of states/territories used in the dataset
states <- unique(outcomeData$State)
## Convert the 3 outcome columns to numeric for sorting later
for (i in c(11,17,23)) {
outcomeData[, i] <- as.numeric(outcomeData[, i])
}
## Check that outcome is valid
if (!(outcome %in% names(outcomes))) {
stop("invalid outcome")
}
## For each state, find the hospital of the given rank
outcomeDataByState <- split(outcomeData, outcomeData$State)
state <- vector()
hospital <- vector()
outcomeData <- read.csv("outcome-of-care-measures.csv",
colClasses="character",
na.strings="Not Available")
setwd("Kevin/Learning/Statistics/DataScience_JohnsHopkins_Coursera/02_RProgramming/ProgrammingAssignment3/")
outcomeData <- read.csv("outcome-of-care-measures.csv",
colClasses="character",
na.strings="Not Available")
outcomes <- vector(mode="list", length=3)
names(outcomes) <- c("heart attack", "heart failure", "pneumonia")
outcomes[[1]] <- 11; outcomes[[2]] <- 17; outcomes[[3]] <- 23
## Create character vector of states/territories used in the dataset
states <- unique(outcomeData$State)
## Convert the 3 outcome columns to numeric for sorting later
for (i in c(11,17,23)) {
outcomeData[, i] <- as.numeric(outcomeData[, i])
}
outcome <- "heart attack"
outcomeDataByState <- split(outcomeData, outcomeData$State)
outcomeDataByState$AK
paste("outcomeDataByState$",states[i])
paste("outcomeDataByState$",states[i],sep="")
paste(outcomeDataByState$,states[i],sep="")
outcomeDataByState[1]
i <- 1
outcomeDataByState[i]
df
df <- data.frame(matrix(ncol=2, nrow=length(states)))
x <- c("hospital", "state")
colnames(df) <- x
df
df$hospital[1] <- "test"
df
df$hospital[[1]] <- "test"
df
df <- data.frame(matrix(ncol=2, nrow=length(states)))
x <- c("hospital", "state")
colnames(df) <- x
df$hospital[[1]] <- "test"
df
source('~/Kevin/Learning/Statistics/DataScience_JohnsHopkins_Coursera/02_RProgramming/ProgrammingAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
outcomes
outcome
head(rankall("heart attack", 20), 10)
i
source('~/Kevin/Learning/Statistics/DataScience_JohnsHopkins_Coursera/02_RProgramming/ProgrammingAssignment3/rankall.R')
source('~/Kevin/Learning/Statistics/DataScience_JohnsHopkins_Coursera/02_RProgramming/ProgrammingAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
i
outcomeDataByState
source('~/Kevin/Learning/Statistics/DataScience_JohnsHopkins_Coursera/02_RProgramming/ProgrammingAssignment3/rankall.R')
source('~/Kevin/Learning/Statistics/DataScience_JohnsHopkins_Coursera/02_RProgramming/ProgrammingAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
outcomeDataByState
outcomeDataByState$VA[,11]
outcomes
outcomes[[outcome]]
str(outcomeDataByState$VA)
source('~/Kevin/Learning/Statistics/DataScience_JohnsHopkins_Coursera/02_RProgramming/ProgrammingAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
names(outcomeData)
names(outcomeData$State)
source('~/Kevin/Learning/Statistics/DataScience_JohnsHopkins_Coursera/02_RProgramming/ProgrammingAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state=="NJ")$hospital)
r <- rankall("heart attack", 4)
as.character(subset(r, state=="HI")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state=="NV")$hospital)
